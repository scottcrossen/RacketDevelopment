#lang racket
; The following is the function definition for "default-parms"
(define (default-parms f values)
  (lambda args
    (apply f
           (append args
                   (if (positive? (- (length values) (length args)))
                       (list-tail values (length args))
                       (list)
                       )
                   )
           )
    )
  )

; The following is the function definition for "type-parms"
(define (check-types types args)
  (if (empty? types)
      (if (empty? args)
          (values)
          (error "not equal lengths of lists")
          )
      (if (empty? args)
          (error "not equal lengths of lists")
          (if ((first types) (first args))
              (check-types (rest types) (rest args))
              (error "wrong type")
              )
          )
      )
  )
(define (type-parms f types)
  (lambda args
    (check-types types args)
    (apply f args)
    )
  )

; The following is the function for "new-sin2"
(define (degrees-to-radians angle)
  (* pi
     (/ angle 180)
     )
  )
(define (new-sin angle type)
  (cond
    ((symbol=? type 'degrees)
     (sin (degrees-to-radians angle)))
    ((symbol=? type 'radians)
     (sin angle))
    )
  )
(define new-sin2 (default-parms
                   (type-parms new-sin (list number? symbol?))
                   (list 0 'radians)
                   )
  )

; Test Cases (negative, 0, positive for most)
;(define g1 (default-parms + (list)))
;(if (equal? (g1 ) 0) "Passed" "Failed")
;(if (equal? (g1 1) 1) "Passed" "Failed")
;(if (equal? (g1 1 2) 3) "Passed" "Failed")
;(if (equal? (g1 1 2 3) 6) "Passed" "Failed")
;(define h1 (default-parms + (list 1)))
;(if (equal? (h1 ) 1) "Passed" "Failed")
;(if (equal? (h1 1) 1) "Passed" "Failed")
;(if (equal? (h1 1 2) 3) "Passed" "Failed")
;(if (equal? (h1 1 2 3) 6) "Passed" "Failed")
;(define i1 (default-parms + (list 1 2)))
;(if (equal? (i1 ) 3) "Passed" "Failed")
;(if (equal? (i1 1) 3) "Passed" "Failed")
;(if (equal? (i1 1 2) 3) "Passed" "Failed")
;(if (equal? (i1 1 2 3) 6) "Passed" "Failed")
;(define j1 (default-parms + (list 1 2 3)))
;(if (equal? (j1 ) 6) "Passed" "Failed")
;(if (equal? (j1 1) 6) "Passed" "Failed")
;(if (equal? (j1 1 2) 6) "Passed" "Failed")
;(if (equal? (j1 1 2 3) 6) "Passed" "Failed")
;(define a1 (type-parms + (list)))
;(if (equal? (a1 ) 0) "Passed" "Failed")
;(if (equal? (a1 1) 1) "Passed" "Failed")
;(if (equal? (a1 1 2) 3) "Passed" "Failed")
;(define b1 (type-parms + (list number?)))
;(if (equal? (b1 ) 0) "Passed" "Failed")
;(if (equal? (b1 1) 1) "Passed" "Failed")
;(if (equal? (b1 1 2) 3) "Passed" "Failed")
;(define c1 (type-parms + (list number? number?)))
;(if (equal? (c1 ) 0) "Passed" "Failed")
;(if (equal? (c1 1) 1) "Passed" "Failed")
;(if (equal? (c1 1 2) 3) "Passed" "Failed")
;"Testing Sin of 180 degrees"
;(new-sin2 180 'degrees)
;"Testing Sin of 0 degrees"
;(new-sin2 0 'degrees)
;"Testing Sin of 180 radians"
;(new-sin2 pi 'radians)
;"Testing Sin of 0 radians"
;(new-sin2 0 'radians)